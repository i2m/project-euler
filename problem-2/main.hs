-- Problem 2
--
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms.
-- By starting with 1 and 2, the first 10 terms will be:
--
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million,
-- find the sum of the even-valued terms.
--
module Main where

import Streaming (MonadIO)
import qualified Streaming.Prelude as S

-- Infinite list of Fibonacci sequence, starting from 1, 2, ...
--
-- >>> take 10 fibs
-- [1,2,3,5,8,13,21,34,55,89]
--
fibs :: (Integral a) => [a]
fibs = 1 : scanl (+) 2 fibs

findSumOfEven :: (Integral a, Foldable f, MonadIO m) => (a -> Bool) -> f a -> m a
findSumOfEven p xs =
  fmap S.fst'
    $ S.sum
    $ S.filter even . S.takeWhile p
    $ S.each xs

main :: IO ()
main = do
  result <- findSumOfEven (< 4000000) fibs
  print (result :: Integer)